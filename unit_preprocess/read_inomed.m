function read_inomed(varargin)
%READ_INOMED   Spike detection for Inomed data.
%   READ_INOMED loads Inomed continuous files, performs filtering,
%   censoring and spike detection of channels. Files are saved in Ch*.mat
%   files for clustering. To support MClust, 'fake tetrode' data is
%   generated by multiplying the single channel data.
%
%   Optional input arguments:
%       DATADIR - path name for reading data
%       RESDIR - path name for writing result files
%
%   Parameter-value input argumets:
%       REFERENCE - allows referenceing options; default: 'none',
%           common average referencing; set to 'common_avg' to apply no
%           common average referencing
%
%   See also INODISC.

%   Balazs Hangya and Panna Hegedus
%   Laboratory of Systems Neuroscience
%   Institute of Experimental Medicine, Budapest, Hungary

% Default arguments
prs = inputParser;
addOptional(prs,'datadir','',@(s)isempty(s)|isdir(s))   % data directory
addOptional(prs,'resdir','',@(s)isempty(s)|isdir(s))   % results directory
addOptional(prs,'rawdatafiletag','',@ischar)   % switch for filtering
addParameter(prs,'reference','none',@(s)ischar(s)|isempty(s))   % switch for referencing
parse(prs,varargin{:})
g = prs.Results;

% Directories
if isequal(g.datadir(end),'\')
    g.datadir = g.datadir(1:end-1);
end

if isempty(g.resdir)
    error('No default resdir!')
end

SaveFeatures = true;   % save MClust feature files

% Common average reference
switch g.reference
    case 'common_avg'
        common_avg = common_avg_ref(g.datadir,32,[],g.rawdatafiletag);
    case {'','none'}
        common_avg = 0;
    otherwise
        error('read_openephys: Unknown reference option.')
end

% Spike detection
cd(g.datadir)
[mer_file, mer_filedir] = uigetfile('*MER*.dat', ...
    'Choose a DAT file!', 'MultiSelect', 'on');

if mer_filedir<1
    error('No file selected. Program aborted!')
else
    cd(mer_filedir);
end
NumChannels = length(mer_file);   % number of channels

for iT = 1:NumChannels
    [data, ts, SampFreq] = MER_bigFile(mer_file{iT}, g.datadir);
    data = data - common_avg;
    [TimeStamps, WaveForms] = inodisc(data,ts,SampFreq,1.5e-3,[]);   % filter and detect spikes; threshold in volts!
    AllWaveForms = nan(size(WaveForms,1),4,size(WaveForms,2));
    AllWaveForms(:,1,:) = WaveForms;   % fake tetrode
    AllWaveForms(:,2,:) = WaveForms;
    AllWaveForms(:,3,:) = WaveForms;
    AllWaveForms(:,4,:) = WaveForms;
    WaveForms = AllWaveForms;
    Chname = ['Ch' num2str(iT)];
    Ch_path = fullfile(g.resdir,Chname);
    save(Ch_path, 'TimeStamps','WaveForms');
    
    if SaveFeatures   % pre-calculate MClust features
        TTdata.TimeStamps = TimeStamps;
        TTdata.WaveForms = WaveForms;
        openephys_SaveMClustFeatures(TTdata,{'Amplitude';'Energy';...
            'WavePC1';'WavePC2';'WavePC3';'Time'},[1 1 1 1],Ch_path)
    end
    
%     clearvars -except g common_avg filepath resdir SaveFeatures iT
end